{"ast":null,"code":"const EXPENSES_STORAGE_KEY = 'expense-tracker-expenses';\n\n/**\n * Save expenses to local storage\n * @param expenses Array of expense objects to save\n */\nexport const saveExpenses = expenses => {\n  try {\n    localStorage.setItem(EXPENSES_STORAGE_KEY, JSON.stringify(expenses));\n  } catch (error) {\n    console.error('Failed to save expenses to local storage:', error);\n  }\n};\n\n/**\n * Load expenses from local storage\n * @returns Array of expenses or empty array if none found\n */\nexport const loadExpenses = () => {\n  try {\n    const expensesJson = localStorage.getItem(EXPENSES_STORAGE_KEY);\n    if (!expensesJson) return [];\n    return JSON.parse(expensesJson);\n  } catch (error) {\n    console.error('Failed to load expenses from local storage:', error);\n    return [];\n  }\n};\n\n/**\n * Clear all expenses from local storage\n */\nexport const clearExpenses = () => {\n  try {\n    localStorage.removeItem(EXPENSES_STORAGE_KEY);\n  } catch (error) {\n    console.error('Failed to clear expenses from local storage:', error);\n  }\n};","map":{"version":3,"names":["EXPENSES_STORAGE_KEY","saveExpenses","expenses","localStorage","setItem","JSON","stringify","error","console","loadExpenses","expensesJson","getItem","parse","clearExpenses","removeItem"],"sources":["/Users/naimur/Downloads/Code/ExpenseTracker/frontend/src/utils/localStorage.ts"],"sourcesContent":["import { Expense } from '../types/expense';\n\nconst EXPENSES_STORAGE_KEY = 'expense-tracker-expenses';\n\n/**\n * Save expenses to local storage\n * @param expenses Array of expense objects to save\n */\nexport const saveExpenses = (expenses: Expense[]): void => {\n  try {\n    localStorage.setItem(EXPENSES_STORAGE_KEY, JSON.stringify(expenses));\n  } catch (error) {\n    console.error('Failed to save expenses to local storage:', error);\n  }\n};\n\n/**\n * Load expenses from local storage\n * @returns Array of expenses or empty array if none found\n */\nexport const loadExpenses = (): Expense[] => {\n  try {\n    const expensesJson = localStorage.getItem(EXPENSES_STORAGE_KEY);\n    if (!expensesJson) return [];\n    return JSON.parse(expensesJson);\n  } catch (error) {\n    console.error('Failed to load expenses from local storage:', error);\n    return [];\n  }\n};\n\n/**\n * Clear all expenses from local storage\n */\nexport const clearExpenses = (): void => {\n  try {\n    localStorage.removeItem(EXPENSES_STORAGE_KEY);\n  } catch (error) {\n    console.error('Failed to clear expenses from local storage:', error);\n  }\n};"],"mappings":"AAEA,MAAMA,oBAAoB,GAAG,0BAA0B;;AAEvD;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAIC,QAAmB,IAAW;EACzD,IAAI;IACFC,YAAY,CAACC,OAAO,CAACJ,oBAAoB,EAAEK,IAAI,CAACC,SAAS,CAACJ,QAAQ,CAAC,CAAC;EACtE,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;EACnE;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAME,YAAY,GAAGA,CAAA,KAAiB;EAC3C,IAAI;IACF,MAAMC,YAAY,GAAGP,YAAY,CAACQ,OAAO,CAACX,oBAAoB,CAAC;IAC/D,IAAI,CAACU,YAAY,EAAE,OAAO,EAAE;IAC5B,OAAOL,IAAI,CAACO,KAAK,CAACF,YAAY,CAAC;EACjC,CAAC,CAAC,OAAOH,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;IACnE,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMM,aAAa,GAAGA,CAAA,KAAY;EACvC,IAAI;IACFV,YAAY,CAACW,UAAU,CAACd,oBAAoB,CAAC;EAC/C,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;EACtE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}