{"ast":null,"code":"var _jsxFileName = \"/Users/naimur/Downloads/Code/ExpenseTracker/frontend/src/components/dashboard/Dashboard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Grid, Paper, Typography, Box, CircularProgress, Alert } from '@mui/material';\nimport { useExpense } from '../../contexts/ExpenseContext';\nimport { api } from '../../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const {\n    state\n  } = useExpense();\n  const {\n    expenses,\n    loading,\n    error\n  } = state;\n  const [summaryLoading, setSummaryLoading] = useState(false);\n  const [summaryError, setSummaryError] = useState(null);\n  const [totalExpense, setTotalExpense] = useState(0);\n  const [categoryTotals, setCategoryTotals] = useState({});\n  const [recentExpenses, setRecentExpenses] = useState([]);\n  const [summary, setSummary] = useState(null);\n  useEffect(() => {\n    // Calculate total expenses and recent expenses from current state\n    const total = expenses.reduce((sum, expense) => sum + expense.amount, 0);\n    setTotalExpense(total);\n\n    // Get recent expenses - last 5\n    const sortedExpenses = [...expenses].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n    setRecentExpenses(sortedExpenses.slice(0, 5));\n  }, [expenses]);\n\n  // Fetch summary data from API\n  useEffect(() => {\n    const fetchSummary = async () => {\n      setSummaryLoading(true);\n      try {\n        const summaryData = await api.getExpenseSummary('monthly');\n        setSummary(summaryData);\n\n        // Process category totals from the API response\n        const categoryMap = {\n          'Food & Dining': 0,\n          'Transportation': 0,\n          'Utilities': 0,\n          'Housing': 0,\n          'Entertainment': 0,\n          'Healthcare': 0,\n          'Shopping': 0,\n          'Personal Care': 0,\n          'Education': 0,\n          'Travel': 0,\n          'Other': 0\n        };\n        summaryData.category_totals.forEach(item => {\n          categoryMap[item.category] = item.total;\n        });\n        setCategoryTotals(categoryMap);\n        setSummaryError(null);\n      } catch (err) {\n        setSummaryError('Failed to load expense summary');\n        console.error('Failed to fetch summary:', err);\n      } finally {\n        setSummaryLoading(false);\n      }\n    };\n    fetchSummary();\n  }, []);\n\n  // Get top spending categories\n  const topCategories = Object.entries(categoryTotals).sort(([, amountA], [, amountB]) => amountB - amountA).slice(0, 3);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        minHeight: '60vh'\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), (error || summaryError) && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      children: error || summaryError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 3,\n          sx: {\n            p: 3,\n            textAlign: 'center',\n            backgroundColor: 'primary.light',\n            color: 'primary.contrastText'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"Total Expenses\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), summaryLoading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 24,\n            sx: {\n              my: 2\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h3\",\n            children: [\"$\", totalExpense.toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 3,\n          sx: {\n            p: 3,\n            textAlign: 'center',\n            backgroundColor: 'secondary.light',\n            color: 'secondary.contrastText'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"This Month\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this), summaryLoading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 24,\n            sx: {\n              my: 2\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h3\",\n            children: [\"$\", expenses.filter(expense => {\n              const today = new Date();\n              const expenseDate = new Date(expense.date);\n              return expenseDate.getMonth() === today.getMonth() && expenseDate.getFullYear() === today.getFullYear();\n            }).reduce((sum, expense) => sum + expense.amount, 0).toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 3,\n          sx: {\n            p: 3,\n            textAlign: 'center',\n            backgroundColor: 'info.light',\n            color: 'info.contrastText'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"Number of Expenses\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h3\",\n            children: expenses.length\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 3,\n          sx: {\n            p: 3\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            children: \"Top Spending Categories\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this), summaryLoading ? /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              justifyContent: 'center',\n              p: 3\n            },\n            children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 15\n          }, this) : topCategories.map(([category, amount], index) => /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mb: 1,\n              display: 'flex',\n              justifyContent: 'space-between'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              children: category\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              fontWeight: \"bold\",\n              children: [\"$\", amount.toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 19\n            }, this)]\n          }, category, true, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 3,\n          sx: {\n            p: 3\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            children: \"Recent Expenses\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 13\n          }, this), loading ? /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              justifyContent: 'center',\n              p: 3\n            },\n            children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 15\n          }, this) : recentExpenses.map(expense => /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mb: 1,\n              display: 'flex',\n              justifyContent: 'space-between'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              children: [new Date(expense.date).toLocaleDateString(), \" - \", expense.description]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              fontWeight: \"bold\",\n              children: [\"$\", expense.amount.toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 19\n            }, this)]\n          }, expense.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"6hCNGIKsHMl9fO9RHF+EIsFtraA=\", false, function () {\n  return [useExpense];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","Grid","Paper","Typography","Box","CircularProgress","Alert","useExpense","api","jsxDEV","_jsxDEV","Dashboard","_s","state","expenses","loading","error","summaryLoading","setSummaryLoading","summaryError","setSummaryError","totalExpense","setTotalExpense","categoryTotals","setCategoryTotals","recentExpenses","setRecentExpenses","summary","setSummary","total","reduce","sum","expense","amount","sortedExpenses","sort","a","b","Date","date","getTime","slice","fetchSummary","summaryData","getExpenseSummary","categoryMap","category_totals","forEach","item","category","err","console","topCategories","Object","entries","amountA","amountB","sx","display","justifyContent","alignItems","minHeight","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","gutterBottom","severity","mb","container","spacing","xs","md","elevation","p","textAlign","backgroundColor","color","size","my","toFixed","filter","today","expenseDate","getMonth","getFullYear","length","map","index","fontWeight","toLocaleDateString","description","id","_c","$RefreshReg$"],"sources":["/Users/naimur/Downloads/Code/ExpenseTracker/frontend/src/components/dashboard/Dashboard.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Grid, Paper, Typography, Box, CircularProgress, Alert } from '@mui/material';\nimport { useExpense } from '../../contexts/ExpenseContext';\nimport { Expense, ExpenseCategory } from '../../types/expense';\nimport { api } from '../../services/api';\n\nconst Dashboard: React.FC = () => {\n  const { state } = useExpense();\n  const { expenses, loading, error } = state;\n  const [summaryLoading, setSummaryLoading] = useState(false);\n  const [summaryError, setSummaryError] = useState<string | null>(null);\n  const [totalExpense, setTotalExpense] = useState(0);\n  const [categoryTotals, setCategoryTotals] = useState<Record<ExpenseCategory, number>>({} as Record<ExpenseCategory, number>);\n  const [recentExpenses, setRecentExpenses] = useState<Expense[]>([]);\n  const [summary, setSummary] = useState<any>(null);\n\n  useEffect(() => {\n    // Calculate total expenses and recent expenses from current state\n    const total = expenses.reduce((sum, expense) => sum + expense.amount, 0);\n    setTotalExpense(total);\n\n    // Get recent expenses - last 5\n    const sortedExpenses = [...expenses].sort(\n      (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()\n    );\n    setRecentExpenses(sortedExpenses.slice(0, 5));\n  }, [expenses]);\n\n  // Fetch summary data from API\n  useEffect(() => {\n    const fetchSummary = async () => {\n      setSummaryLoading(true);\n      try {\n        const summaryData = await api.getExpenseSummary('monthly');\n        setSummary(summaryData);\n        \n        // Process category totals from the API response\n        const categoryMap: Record<ExpenseCategory, number> = {\n          'Food & Dining': 0,\n          'Transportation': 0,\n          'Utilities': 0,\n          'Housing': 0,\n          'Entertainment': 0,\n          'Healthcare': 0,\n          'Shopping': 0,\n          'Personal Care': 0,\n          'Education': 0,\n          'Travel': 0,\n          'Other': 0\n        };\n        \n        summaryData.category_totals.forEach((item: { category: ExpenseCategory; total: number }) => {\n          categoryMap[item.category] = item.total;\n        });\n        setCategoryTotals(categoryMap);\n        \n        setSummaryError(null);\n      } catch (err) {\n        setSummaryError('Failed to load expense summary');\n        console.error('Failed to fetch summary:', err);\n      } finally {\n        setSummaryLoading(false);\n      }\n    };\n\n    fetchSummary();\n  }, []);\n\n  // Get top spending categories\n  const topCategories = Object.entries(categoryTotals)\n    .sort(([, amountA], [, amountB]) => amountB - amountA)\n    .slice(0, 3);\n\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '60vh' }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      <Typography variant=\"h4\" gutterBottom>\n        Dashboard\n      </Typography>\n\n      {(error || summaryError) && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          {error || summaryError}\n        </Alert>\n      )}\n\n      <Grid container spacing={3}>\n        {/* Total Expenses */}\n        <Grid item xs={12} md={4}>\n          <Paper \n            elevation={3} \n            sx={{ \n              p: 3, \n              textAlign: 'center',\n              backgroundColor: 'primary.light',\n              color: 'primary.contrastText'\n            }}\n          >\n            <Typography variant=\"h6\">Total Expenses</Typography>\n            {summaryLoading ? (\n              <CircularProgress size={24} sx={{ my: 2 }} />\n            ) : (\n              <Typography variant=\"h3\">${totalExpense.toFixed(2)}</Typography>\n            )}\n          </Paper>\n        </Grid>\n\n        {/* This Month Expenses */}\n        <Grid item xs={12} md={4}>\n          <Paper \n            elevation={3} \n            sx={{ \n              p: 3, \n              textAlign: 'center', \n              backgroundColor: 'secondary.light',\n              color: 'secondary.contrastText'\n            }}\n          >\n            <Typography variant=\"h6\">This Month</Typography>\n            {summaryLoading ? (\n              <CircularProgress size={24} sx={{ my: 2 }} />\n            ) : (\n              <Typography variant=\"h3\">\n                ${expenses\n                  .filter(expense => {\n                    const today = new Date();\n                    const expenseDate = new Date(expense.date);\n                    return (\n                      expenseDate.getMonth() === today.getMonth() &&\n                      expenseDate.getFullYear() === today.getFullYear()\n                    );\n                  })\n                  .reduce((sum, expense) => sum + expense.amount, 0)\n                  .toFixed(2)}\n              </Typography>\n            )}\n          </Paper>\n        </Grid>\n\n        {/* Number of Expenses */}\n        <Grid item xs={12} md={4}>\n          <Paper \n            elevation={3} \n            sx={{ \n              p: 3, \n              textAlign: 'center',\n              backgroundColor: 'info.light',\n              color: 'info.contrastText'\n            }}\n          >\n            <Typography variant=\"h6\">Number of Expenses</Typography>\n            <Typography variant=\"h3\">{expenses.length}</Typography>\n          </Paper>\n        </Grid>\n\n        {/* Top Categories */}\n        <Grid item xs={12} md={6}>\n          <Paper elevation={3} sx={{ p: 3 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              Top Spending Categories\n            </Typography>\n            {summaryLoading ? (\n              <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\n                <CircularProgress />\n              </Box>\n            ) : (\n              topCategories.map(([category, amount], index) => (\n                <Box key={category} sx={{ mb: 1, display: 'flex', justifyContent: 'space-between' }}>\n                  <Typography variant=\"body1\">{category}</Typography>\n                  <Typography variant=\"body1\" fontWeight=\"bold\">\n                    ${amount.toFixed(2)}\n                  </Typography>\n                </Box>\n              ))\n            )}\n          </Paper>\n        </Grid>\n\n        {/* Recent Expenses */}\n        <Grid item xs={12} md={6}>\n          <Paper elevation={3} sx={{ p: 3 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              Recent Expenses\n            </Typography>\n            {loading ? (\n              <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\n                <CircularProgress />\n              </Box>\n            ) : (\n              recentExpenses.map(expense => (\n                <Box key={expense.id} sx={{ mb: 1, display: 'flex', justifyContent: 'space-between' }}>\n                  <Typography variant=\"body2\">\n                    {new Date(expense.date).toLocaleDateString()} - {expense.description}\n                  </Typography>\n                  <Typography variant=\"body2\" fontWeight=\"bold\">\n                    ${expense.amount.toFixed(2)}\n                  </Typography>\n                </Box>\n              ))\n            )}\n          </Paper>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}