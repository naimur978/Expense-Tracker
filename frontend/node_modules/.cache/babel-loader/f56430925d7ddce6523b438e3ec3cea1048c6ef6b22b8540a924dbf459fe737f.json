{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8001/api';\nexport const api = {\n  async getExpenses() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/expenses/`, {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => null);\n        throw new Error((errorData === null || errorData === void 0 ? void 0 : errorData.detail) || `HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      // Convert string amounts to numbers\n      return data.results.map(expense => ({\n        ...expense,\n        amount: Number(expense.amount)\n      }));\n    } catch (error) {\n      console.error('Error fetching expenses:', error);\n      throw error;\n    }\n  },\n  async createExpense(expense) {\n    const response = await fetch(`${API_BASE_URL}/expenses/`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(expense)\n    });\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => null);\n      throw new Error((errorData === null || errorData === void 0 ? void 0 : errorData.detail) || 'Failed to create expense');\n    }\n    const data = await response.json();\n    // Convert amount to number when receiving response\n    return {\n      ...data,\n      amount: Number(data.amount)\n    };\n  },\n  async updateExpense(id, expense) {\n    const response = await fetch(`${API_BASE_URL}/expenses/${id}/`, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(expense)\n    });\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => null);\n      throw new Error((errorData === null || errorData === void 0 ? void 0 : errorData.detail) || 'Failed to update expense');\n    }\n    const data = await response.json();\n    // Convert amount to number when receiving response\n    return {\n      ...data,\n      amount: Number(data.amount)\n    };\n  },\n  async deleteExpense(id) {\n    const response = await fetch(`${API_BASE_URL}/expenses/${id}/`, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => null);\n      throw new Error((errorData === null || errorData === void 0 ? void 0 : errorData.detail) || 'Failed to delete expense');\n    }\n  },\n  async getExpenseSummary(timeframe = 'monthly') {\n    const response = await fetch(`${API_BASE_URL}/expenses/summary/?timeframe=${timeframe}`, {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => null);\n      throw new Error((errorData === null || errorData === void 0 ? void 0 : errorData.detail) || 'Failed to fetch expense summary');\n    }\n    const data = await response.json();\n    // Convert amounts to numbers in summary data\n    return {\n      ...data,\n      category_totals: data.category_totals.map(item => ({\n        ...item,\n        total: Number(item.total)\n      })),\n      time_series: data.time_series.map(item => ({\n        ...item,\n        total: Number(item.total)\n      }))\n    };\n  }\n};","map":{"version":3,"names":["API_BASE_URL","api","getExpenses","response","fetch","headers","ok","errorData","json","catch","Error","detail","status","data","results","map","expense","amount","Number","error","console","createExpense","method","body","JSON","stringify","updateExpense","id","deleteExpense","getExpenseSummary","timeframe","category_totals","item","total","time_series"],"sources":["/Users/naimur/Downloads/Code/ExpenseTracker/frontend/src/services/api.ts"],"sourcesContent":["import { Expense } from '../types/expense';\n\nconst API_BASE_URL = 'http://localhost:8001/api';\n\nexport const api = {\n  async getExpenses() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/expenses/`, {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => null);\n        throw new Error(errorData?.detail || `HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      // Convert string amounts to numbers\n      return data.results.map((expense: any) => ({\n        ...expense,\n        amount: Number(expense.amount)\n      }));\n    } catch (error) {\n      console.error('Error fetching expenses:', error);\n      throw error;\n    }\n  },\n\n  async createExpense(expense: Omit<Expense, 'id' | 'createdAt'>) {\n    const response = await fetch(`${API_BASE_URL}/expenses/`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(expense),\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json().catch(() => null);\n      throw new Error(errorData?.detail || 'Failed to create expense');\n    }\n    \n    const data = await response.json();\n    // Convert amount to number when receiving response\n    return {\n      ...data,\n      amount: Number(data.amount)\n    };\n  },\n\n  async updateExpense(id: string, expense: Omit<Expense, 'id' | 'createdAt'>) {\n    const response = await fetch(`${API_BASE_URL}/expenses/${id}/`, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(expense),\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json().catch(() => null);\n      throw new Error(errorData?.detail || 'Failed to update expense');\n    }\n    \n    const data = await response.json();\n    // Convert amount to number when receiving response\n    return {\n      ...data,\n      amount: Number(data.amount)\n    };\n  },\n\n  async deleteExpense(id: string) {\n    const response = await fetch(`${API_BASE_URL}/expenses/${id}/`, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json().catch(() => null);\n      throw new Error(errorData?.detail || 'Failed to delete expense');\n    }\n  },\n\n  async getExpenseSummary(timeframe: 'weekly' | 'monthly' | 'yearly' = 'monthly') {\n    const response = await fetch(`${API_BASE_URL}/expenses/summary/?timeframe=${timeframe}`, {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json().catch(() => null);\n      throw new Error(errorData?.detail || 'Failed to fetch expense summary');\n    }\n    \n    const data = await response.json();\n    // Convert amounts to numbers in summary data\n    return {\n      ...data,\n      category_totals: data.category_totals.map((item: any) => ({\n        ...item,\n        total: Number(item.total)\n      })),\n      time_series: data.time_series.map((item: any) => ({\n        ...item,\n        total: Number(item.total)\n      }))\n    };\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}